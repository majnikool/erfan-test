name: CI/CD Pipeline for NGINX App

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU for multi-platform build
        uses: docker/setup-qemu-action@v3

      - name: Set version
        id: version
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
          else
            # Use 0.0.0-dev.$(date +%s) for non-tag builds
            echo "version=0.0.0-dev.$(date +%s)" >> $GITHUB_OUTPUT
            echo "docker_tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker Image
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_REPO }}
        run: |
          # For non-tag pushes, use 'latest' tag
          if [[ "${{ steps.version.outputs.docker_tag }}" == "latest" ]]; then
            docker buildx build --platform linux/amd64,linux/arm64 \
              -t $IMAGE_NAME:latest \
              --push .
          else
            # For tag pushes, use both version tag and 'latest'
            docker buildx build --platform linux/amd64,linux/arm64 \
              -t $IMAGE_NAME:${{ steps.version.outputs.version }} \
              -t $IMAGE_NAME:latest \
              --push .
          fi
          
          # Export the version for other jobs
          echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_ENV

  helm:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.3

      - name: Set version
        id: version
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
          else
            # Use 0.0.0-dev.$(date +%s) for non-tag builds
            echo "version=0.0.0-dev.$(date +%s)" >> $GITHUB_OUTPUT
          fi

      - name: Package Helm Chart
        run: helm package nginx-app --version ${{ steps.version.outputs.version }}

      - name: Push Helm Chart to GitHub Pages (optional)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p docs
          mv nginx-app-*.tgz docs/
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add docs/
          git commit -m "Publishing Helm chart for version ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} main

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, helm]
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.3

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GKE_KEY_JSON }}

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - name: Set version
        id: version
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
            echo "docker_tag=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          else
            # Use 0.0.0-dev.$(date +%s) for non-tag builds
            echo "version=0.0.0-dev.$(date +%s)" >> $GITHUB_OUTPUT
            echo "docker_tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Create namespace if not exists
        run: |
          if ! kubectl get namespace ingress > /dev/null 2>&1; then
            kubectl create namespace ingress
          fi

      - name: Deploy Helm Chart
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_REPO }}
        run: |
          helm upgrade --install nginx-app ./nginx-app \
            --namespace ingress \
            --set image.repository=$IMAGE_NAME \
            --set image.tag=${{ steps.version.outputs.docker_tag }}